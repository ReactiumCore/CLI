const { Spinner, chalk, generator, message, op, prefix, flagsToParams } = arcli;

const NAME = '{{{command}}}';
const CANCELED = '{{{command}}} canceled!';
const DESC = 'The description of the command';

// prettier-ignore
const HELP = () => console.log(`
Example:
  $ arcli {{{command}}} -h
`);

const CONFORM = (input, props) =>
    Object.keys(input).reduce((output, key) => {
        let val = input[key];

        output[key] = val;

        return output;
    }, {});

const PREFLIGHT = ({ msg, params }) => {
    message(msg || 'Preflight checklist:');
    console.log(JSON.stringify(params, null, 2));
    console.log('');
};

const INPUT = ({ inquirer }) =>
    inquirer.prompt([
        {
            type: 'input',
            name: 'sample',
            prefix,
            message: 'Sample Input',
            suffix: chalk.magenta(': '),
        },
    ]);

const CONFIRM = ({ inquirer }) =>
    inquirer.prompt([
        {
            default: false,
            type: 'confirm',
            name: 'confirm',
            message: 'Proceed?',
            prefix,
            suffix: chalk.magenta(': '),
        },
    ]);

const ACTION = async ({ opt, props }) => {
    const flags = ['sample'];

    let params = flagsToParams({ opt, flags });

    const userInput = await INPUT(props, params);
    Object.entries(userInput).forEach(([key, val]) => (params[key] = val));

    params = CONFORM(params, props);

    PREFLIGHT({ params });

    const { confirm } = await CONFIRM(props);
    if (confirm !== true) {
        message(CANCELED);
        return;
    }

    return generator({
        actions: require('./actions')(Spinner),
        params,
        props,
    }).catch((err) => message(op.get(err, 'message', CANCELED)));
};

export const COMMAND = ({ program, props }) =>
    program
        .command(NAME)
        .description(DESC)
        .action((opt) => ACTION({ opt, props }))
        .option('-s, --sample [sample]', 'Sample parameter.')
        .on('--help', HELP);

export const ID = NAME;
